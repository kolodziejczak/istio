name: Post Main Workflow

permissions:
  id-token: write # This is required for requesting the JWT token
  contents: read # This is required for actions/checkouts

on:
  push:
    branches:
      - main
    paths-ignore:
      - "docs/**"
      - "**/*.md"
      - "tests/performance/**"
      - "OWNERS"
      - "CODEOWNERS"
      - "sec-scanners-config.yaml"
      - "external-images.yaml"
      - ".reuse/**"

jobs:
  unit-tests:
    name: Dispatch unit test
    uses: ./.github/workflows/call-unit-lint.yaml
    if: github.event.pull_request.draft == false
    secrets: inherit
    
  build-image:
    name: Build manager image
    runs-on: ubuntu-latest
    steps:
      - run: echo "Building image"

  build-experimental-image:
    name: Build manager image - experimental
    runs-on: ubuntu-latest
    steps:
      - run: echo "Building image exp"

  istio-upgrade-test-k3d:
    name: Istio upgrade integration test K3D
    runs-on: ubuntu-latest
    needs: [ build-image ]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/actions/upgrade-integration-test
        with:
          operator-image-name: "europe-docker.pkg.dev/kyma-project/prod/istio/main/istio-manager:${{github.sha}}"
          target_branch: ${{ github.ref_name }}

  istio-upgrade-test-aws:
    name: Istio upgrade integration test AWS
    runs-on: ubuntu-latest
    needs: [ build-image ]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/actions/e2e-test-gardener
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TARGET_BRANCH: ${{ github.ref_name }}
        with:
          manager_image: "europe-docker.pkg.dev/kyma-project/prod/istio/main/istio-manager:${{github.sha}}"
          gardener_secret: ${{ secrets.GARDENER_TOKEN }}
          gardener_project_name: ${{ vars.GARDENER_PROJECT_NAME }}
          gardener_provider: aws
          test_make_target: "istio-upgrade-integration-test"

  istio-e2e-test-k3d:
    name: Istio E2E test K3D
    runs-on: ubuntu-latest
    needs: [build-image]
    strategy:
      fail-fast: false
      matrix:
        test_make_target: [ "configuration-integration-test", "mesh-communication-integration-test", "installation-integration-test", "observability-integration-test" ]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/actions/e2e-test-k3d
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          test_make_target: ${{ matrix.test_make_target }}
          operator-image-name: "europe-docker.pkg.dev/kyma-project/prod/istio/main/istio-manager:${{github.sha}}"
          servers-memory: "16"
          agents: 2

  istio-e2e-gcp:
    name: Istio E2E test GCP
    runs-on: ubuntu-latest
    needs: [build-image]
    strategy:
      fail-fast: false
      matrix:
        test_make_target: [ "configuration-integration-test", "mesh-communication-integration-test", "installation-integration-test", "observability-integration-test" ]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/actions/e2e-test-gardener
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          manager_image: "europe-docker.pkg.dev/kyma-project/prod/istio/main/istio-manager:${{github.sha}}"
          gardener_secret: ${{ secrets.GARDENER_TOKEN }}
          gardener_project_name: ${{ vars.GARDENER_PROJECT_NAME }}
          gardener_provider: gcp
          test_make_target: ${{ matrix.test_make_target }}

  istio-e2e-aws-specific:
    name: Istio E2E test AWS specific
    runs-on: ubuntu-latest
    needs: [build-image]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/actions/e2e-test-gardener
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          manager_image: "europe-docker.pkg.dev/kyma-project/prod/istio/main/istio-manager:${{github.sha}}"
          gardener_secret: ${{ secrets.GARDENER_TOKEN }}
          gardener_project_name: ${{ vars.GARDENER_PROJECT_NAME }}
          gardener_provider: aws
          test_make_target: aws-integration-test

  istio-e2e-gcp-specific:
    name: Istio E2E test GCP specific
    runs-on: ubuntu-latest
    needs: [build-image]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/actions/e2e-test-gardener
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          manager_image: "europe-docker.pkg.dev/kyma-project/prod/istio/main/istio-manager:${{github.sha}}"
          gardener_secret: ${{ secrets.GARDENER_TOKEN }}
          gardener_project_name: ${{ vars.GARDENER_PROJECT_NAME }}
          gardener_provider: gcp
          test_make_target: gcp-integration-test

  istio-e2e-aws:
    name: Istio E2E test AWS
    runs-on: ubuntu-latest
    needs: [build-image]
    strategy:
      fail-fast: false
      matrix:
        test_make_target: [ "configuration-integration-test", "mesh-communication-integration-test", "installation-integration-test", "observability-integration-test" ]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/actions/e2e-test-gardener
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          manager_image: "europe-docker.pkg.dev/kyma-project/prod/istio/main/istio-manager:${{github.sha}}"
          gardener_secret: ${{ secrets.GARDENER_TOKEN }}
          gardener_project_name: ${{ vars.GARDENER_PROJECT_NAME }}
          gardener_provider: aws
          test_make_target: ${{ matrix.test_make_target }}

  slack_failed_notification:
    name: Slack Notification
    runs-on: ubuntu-latest
    steps:
      - run: |
            echo "Sending slack notification"
